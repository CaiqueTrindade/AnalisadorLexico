Lista de Tokens

1 const Palavra Reservada;
1 { Delimitador {;
2 int Palavra Reservada;
2 tamanho_vetor Identificador;
2 50 Número Inteiro;
2 ; Delimitador ;;
3 } Delimitador };
5 typedef Palavra Reservada;
5 struct Palavra Reservada;
5 pessoa Identificador;
5 { Delimitador {;
6 string Palavra Reservada;
6 nome Identificador;
6 , Delimitador ,;
6 endereco Identificador;
6 , Delimitador ,;
6 telefone Identificador;
6 ; Delimitador ;;
7 } Delimitador };
9 typedef Palavra Reservada;
9 struct Palavra Reservada;
9 funcionario Identificador;
9 extends Palavra Reservada;
9 pessoa Identificador;
9 { Delimitador {;
10 string Palavra Reservada;
10 departamento Identificador;
10 ; Delimitador ;;
11 real Palavra Reservada;
11 salario Identificador;
11 ; Delimitador ;;
12 } Delimitador };
14 var Palavra Reservada;
14 { Delimitador {;
15 pessoa Identificador;
15 vetor_pessoas Identificador;
15 [ Delimitador [;
15 tamanho_vetor Identificador;
15 ] Delimitador ];
15 ; Delimitador ;;
16 funcionario Identificador;
16 vetor_funcionarios Identificador;
16 [ Delimitador [;
16 50 Número Inteiro;
16 ] Delimitador ];
16 ; Delimitador ;;
17 int Palavra Reservada;
17 pessoas_cadastradas Identificador;
17 = Operador Relacional de Atribuição;
17 0 Número Inteiro;
17 , Delimitador ,;
17 funcionarios_cadastrados Identificador;
17 = Operador Relacional de Atribuição;
17 0 Número Inteiro;
17 ; Delimitador ;;
18 } Delimitador };
20 function Palavra Reservada;
20 boolean Palavra Reservada;
20 cadastrarPessoas Identificador;
20 ( Delimitador (;
20 pessoa Identificador;
20 pessoa Identificador;
20 ) Delimitador );
20 { Delimitador {;
21 if Palavra Reservada;
21 ( Delimitador (;
21 global Palavra Reservada;
21 . Delimitador .;
21 pessoas_cadastradas Identificador;
21 < Operador Relacional;
21 tamanho_vetor Identificador;
21 ) Delimitador );
21 { Delimitador {;
22 global Palavra Reservada;
22 . Delimitador .;
22 vetor_pessoas Identificador;
22 [ Delimitador [;
22 global Palavra Reservada;
22 . Delimitador .;
22 pessoas_cadastradas Identificador;
22 ] Delimitador ];
22 = Operador Relacional de Atribuição;
22 pessoa Identificador;
22 ; Delimitador ;;
23 global Palavra Reservada;
23 . Delimitador .;
23 pessoas_cadastradas Identificador;
23 = Operador Relacional de Atribuição;
23 global Palavra Reservada;
23 . Delimitador .;
23 pessoas_cadastradas Identificador;
23 + Operador Aritmético;
23 1 Número Inteiro;
23 ; Delimitador ;;
24 } Delimitador };
25 else Palavra Reservada;
25 { Delimitador {;
26 return Palavra Reservada;
26 false Palavra Reservada;
26 ; Delimitador ;;
27 } Delimitador };
28 } Delimitador };
30 procedure Palavra Reservada;
30 imprimirPessoas Identificador;
30 ( Delimitador (;
30 string Palavra Reservada;
30 vetor Identificador;
30 ) Delimitador );
30 { Delimitador {;
32 var Palavra Reservada;
32 { Delimitador {;
33 int Palavra Reservada;
33 i Identificador;
33 = Operador Relacional de Atribuição;
33 0 Número Inteiro;
33 ; Delimitador ;;
34 } Delimitador };
36 if Palavra Reservada;
36 ( Delimitador (;
36 vetor Identificador;
36 == Operador Relacional;
36 "vetor_pessoas" Cadeia de Caracteres;
36 ) Delimitador );
36 { Delimitador {;
37 while Palavra Reservada;
37 ( Delimitador (;
37 i Identificador;
37 < Operador Relacional;
37 global Palavra Reservada;
37 . Delimitador .;
37 pessoas_cadastradas Identificador;
37 ) Delimitador );
37 { Delimitador {;
38 print Palavra Reservada;
38 ( Delimitador (;
38 vetor_pessoas Identificador;
38 [ Delimitador [;
38 i Identificador;
38 ] Delimitador ];
38 ) Delimitador );
38 ; Delimitador ;;
39 i Identificador;
39 ++ Operador Aritmético de incremento/decremento;
39 ; Delimitador ;;
40 } Delimitador };
41 } Delimitador };
42 else Palavra Reservada;
42 { Delimitador {;
43 print Palavra Reservada;
43 ( Delimitador (;
43 vetor_funcionarios Identificador;
43 ) Delimitador );
43 ; Delimitador ;;
44 } Delimitador };
45 } Delimitador };
47 start Palavra Reservada;
47 { Delimitador {;
48 var Palavra Reservada;
48 { Delimitador {;
49 int Palavra Reservada;
49 entrada Identificador;
49 , Delimitador ,;
49 retorno Identificador;
49 ; Delimitador ;;
50 pessoa Identificador;
50 pessoa Identificador;
50 ; Delimitador ;;
51 } Delimitador };
53 while Palavra Reservada;
53 ( Delimitador (;
53 true Palavra Reservada;
53 ) Delimitador );
53 { Delimitador {;
54 print Palavra Reservada;
54 ( Delimitador (;
54 "Digite 0 para cadastrar uma nova pessoa ou 1 para imprimir a lista de pessoas cadastradas:" Cadeia de Caracteres;
54 ) Delimitador );
54 ; Delimitador ;;
55 read Palavra Reservada;
55 ( Delimitador (;
55 entrada Identificador;
55 ) Delimitador );
55 ; Delimitador ;;
57 if Palavra Reservada;
57 ( Delimitador (;
57 entrada Identificador;
57 == Operador Relacional;
57 0 Número Inteiro;
57 ) Delimitador );
57 { Delimitador {;
58 print Palavra Reservada;
58 ( Delimitador (;
58 o Identificador;
58 e Identificador;
58 telefone Identificador;
58 da Identificador;
58 pessoa Identificador;
58 que Identificador;
58 deseja Identificador;
58 ) Delimitador );
58 ; Delimitador ;;
59 read Palavra Reservada;
59 ( Delimitador (;
59 pessoa Identificador;
59 . Delimitador .;
59 nome Identificador;
59 , Delimitador ,;
59 pessoa Identificador;
59 . Delimitador .;
59 endereco Identificador;
59 , Delimitador ,;
59 pessoa Identificador;
59 . Delimitador .;
59 telefone Identificador;
59 ) Delimitador );
59 ; Delimitador ;;
60 retorno Identificador;
60 = Operador Relacional de Atribuição;
60 cadastrarPessoa Identificador;
60 ( Delimitador (;
60 pessoa Identificador;
60 ) Delimitador );
60 ; Delimitador ;;
61 if Palavra Reservada;
61 ( Delimitador (;
61 retorno Identificador;
61 ) Delimitador );
61 { Delimitador {;
62 print Palavra Reservada;
62 ( Delimitador (;
62 "Nova pessoa cadastrada com sucesso." Cadeia de Caracteres;
62 ) Delimitador );
62 ; Delimitador ;;
63 } Delimitador };
64 else Palavra Reservada;
64 { Delimitador {;
65 print Palavra Reservada;
65 ( Delimitador (;
65 cheia Identificador;
65 . Delimitador .;
66 } Delimitador };
67 } Delimitador };
68 else Palavra Reservada;
68 { Delimitador {;
69 if Palavra Reservada;
69 ( Delimitador (;
69 entrada Identificador;
69 == Operador Relacional;
69 1 Número Inteiro;
69 ) Delimitador );
69 { Delimitador {;
70 imprimirPessoas Identificador;
70 ( Delimitador (;
70 ) Delimitador );
70 ; Delimitador ;;
71 } Delimitador };
72 else Palavra Reservada;
72 { Delimitador {;
73 print Palavra Reservada;
73 ( Delimitador (;
73 lida Identificador;
73 , Delimitador ,;
73 tente Identificador;
73 novamente Identificador;
73 . Delimitador .;
74 } Delimitador };
75 } Delimitador };
76 } Delimitador };
77 } Delimitador };
79 // teste de comentário Delimitador de Comentário;


Lista de Erros

58 "Digite o nome, endereç Mal formação de Cadeia de Caracteres;
58 cadastrar:" Mal formação de Identificador;
65 "A lista está Mal formação de Cadeia de Caracteres;
65 "); Mal formação de Cadeia de Caracteres;
73 "Entrada invá Mal formação de Cadeia de Caracteres;
73 "); Mal formação de Cadeia de Caracteres;
