Lista de Tokens

1 const Palavra Reservada;
1 { Delimitador {;
2 int Palavra Reservada;
2 tamanho_vetor Identificador;
2 50 Número Inteiro;
2 ; Delimitador ;;
3 } Delimitador };
5 typedef Palavra Reservada;
5 struct Palavra Reservada;
5 pessoa Identificador;
5 { Delimitador {;
6 string Palavra Reservada;
6 nome Identificador;
6 , Delimitador ,;
6 endereco Identificador;
6 , Delimitador ,;
6 telefone Identificador;
6 ; Delimitador ;;
7 } Delimitador };
9 typedef Palavra Reservada;
9 struct Palavra Reservada;
9 funcionario Identificador;
9 extends Palavra Reservada;
9 pessoa Identificador;
9 { Delimitador {;
10 string Palavra Reservada;
10 departamento Identificador;
10 ; Delimitador ;;
11 real Palavra Reservada;
11 salario Identificador;
11 ; Delimitador ;;
12 } Delimitador };
14 var Palavra Reservada;
14 { Delimitador {;
15 pessoa Identificador;
15 vetor_pessoas Identificador;
15 [ Delimitador [;
15 tamanho_vetor Identificador;
15 ] Delimitador ];
15 ; Delimitador ;;
16 funcionario Identificador;
16 vetor_funcionarios Identificador;
16 [ Delimitador [;
16 50 Número Inteiro;
16 ] Delimitador ];
16 ; Delimitador ;;
17 int Palavra Reservada;
17 pessoas_cadastradas Identificador;
17 = Operador Relacional de Atribuição;
17 0 Número Inteiro;
17 , Delimitador ,;
17 funcionarios_cadastrados Identificador;
17 = Operador Relacional de Atribuição;
17 0 Número Inteiro;
17 ; Delimitador ;;
18 } Delimitador };
20 function Palavra Reservada;
20 boolean Palavra Reservada;
20 cadastrarPessoas Identificador;
20 ( Delimitador (;
20 pessoa Identificador;
20 pessoa Identificador;
20 ) Delimitador );
20 { Delimitador {;
21 var Palavra Reservada;
21 { Delimitador {;
22 boolean Palavra Reservada;
22 retorno Identificador;
22 = Operador Relacional de Atribuição;
22 false Palavra Reservada;
22 ; Delimitador ;;
23 } Delimitador };
24 if Palavra Reservada;
24 ( Delimitador (;
24 global Palavra Reservada;
24 . Delimitador .;
24 pessoas_cadastradas Identificador;
24 < Operador Relacional;
24 tamanho_vetor Identificador;
24 ) Delimitador );
24 then Palavra Reservada;
24 { Delimitador {;
25 global Palavra Reservada;
25 . Delimitador .;
25 vetor_pessoas Identificador;
25 [ Delimitador [;
25 global Palavra Reservada;
25 . Delimitador .;
25 pessoas_cadastradas Identificador;
25 ] Delimitador ];
25 = Operador Relacional de Atribuição;
25 pessoa Identificador;
25 ; Delimitador ;;
26 global Palavra Reservada;
26 . Delimitador .;
26 pessoas_cadastradas Identificador;
26 = Operador Relacional de Atribuição;
26 global Palavra Reservada;
26 . Delimitador .;
26 pessoas_cadastradas Identificador;
26 + Operador Aritmético;
26 1 Número Inteiro;
26 ; Delimitador ;;
27 retorno Identificador;
27 = Operador Relacional de Atribuição;
27 true Palavra Reservada;
27 ; Delimitador ;;
28 } Delimitador };
29 else Palavra Reservada;
29 { Delimitador {;
30 return Palavra Reservada;
30 retorno Identificador;
30 ; Delimitador ;;
31 } Delimitador };
32 } Delimitador };
34 procedure Palavra Reservada;
34 imprimirPessoas Identificador;
34 ( Delimitador (;
34 string Palavra Reservada;
34 vetor Identificador;
34 ) Delimitador );
34 { Delimitador {;
36 var Palavra Reservada;
36 { Delimitador {;
37 int Palavra Reservada;
37 i Identificador;
37 = Operador Relacional de Atribuição;
37 0 Número Inteiro;
37 ; Delimitador ;;
38 } Delimitador };
40 if Palavra Reservada;
40 ( Delimitador (;
40 vetor Identificador;
40 == Operador Relacional;
40 "vetor_pessoas" Cadeia de Caracteres;
40 ) Delimitador );
40 then Palavra Reservada;
40 { Delimitador {;
41 while Palavra Reservada;
41 ( Delimitador (;
41 i Identificador;
41 < Operador Relacional;
41 global Palavra Reservada;
41 . Delimitador .;
41 pessoas_cadastradas Identificador;
41 ) Delimitador );
41 { Delimitador {;
42 print Palavra Reservada;
42 ( Delimitador (;
42 vetor_pessoas Identificador;
42 [ Delimitador [;
42 i Identificador;
42 ] Delimitador ];
42 ) Delimitador );
42 ; Delimitador ;;
43 i Identificador;
43 = Operador Relacional de Atribuição;
43 i Identificador;
43 + Operador Aritmético;
43 1 Número Inteiro;
43 ; Delimitador ;;
44 } Delimitador };
45 } Delimitador };
46 else Palavra Reservada;
46 { Delimitador {;
47 print Palavra Reservada;
47 ( Delimitador (;
47 vetor_funcionarios Identificador;
47 ) Delimitador );
47 ; Delimitador ;;
48 } Delimitador };
49 } Delimitador };
51 start Palavra Reservada;
51 ( Delimitador (;
51 ) Delimitador );
51 { Delimitador {;
52 var Palavra Reservada;
52 { Delimitador {;
53 int Palavra Reservada;
53 entrada Identificador;
53 , Delimitador ,;
53 retorno Identificador;
53 ; Delimitador ;;
54 pessoa Identificador;
54 pessoa Identificador;
54 ; Delimitador ;;
55 } Delimitador };
57 while Palavra Reservada;
57 ( Delimitador (;
57 true Palavra Reservada;
57 ) Delimitador );
57 { Delimitador {;
58 print Palavra Reservada;
58 ( Delimitador (;
58 "Digite 0 para cadastrar uma nova pessoa ou 1 para imprimir a lista de pessoas cadastradas:" Cadeia de Caracteres;
58 ) Delimitador );
58 ; Delimitador ;;
59 read Palavra Reservada;
59 ( Delimitador (;
59 entrada Identificador;
59 ) Delimitador );
59 ; Delimitador ;;
61 if Palavra Reservada;
61 ( Delimitador (;
61 entrada Identificador;
61 == Operador Relacional;
61 0 Número Inteiro;
61 ) Delimitador );
61 then Palavra Reservada;
61 { Delimitador {;
62 print Palavra Reservada;
62 ( Delimitador (;
62 "Digite o nome, endereco e telefone da pessoa que deseja cadastrar:" Cadeia de Caracteres;
62 ) Delimitador );
62 ; Delimitador ;;
63 read Palavra Reservada;
63 ( Delimitador (;
63 pessoa Identificador;
63 . Delimitador .;
63 nome Identificador;
63 , Delimitador ,;
63 pessoa Identificador;
63 . Delimitador .;
63 endereco Identificador;
63 , Delimitador ,;
63 pessoa Identificador;
63 . Delimitador .;
63 telefone Identificador;
63 ) Delimitador );
63 ; Delimitador ;;
64 retorno Identificador;
64 = Operador Relacional de Atribuição;
64 cadastrarPessoa Identificador;
64 ( Delimitador (;
64 pessoa Identificador;
64 ) Delimitador );
64 ; Delimitador ;;
65 if Palavra Reservada;
65 ( Delimitador (;
65 retorno Identificador;
65 == Operador Relacional;
65 true Palavra Reservada;
65 ) Delimitador );
65 then Palavra Reservada;
65 { Delimitador {;
66 print Palavra Reservada;
66 ( Delimitador (;
66 "Nova pessoa cadastrada com sucesso." Cadeia de Caracteres;
66 ) Delimitador );
66 ; Delimitador ;;
67 } Delimitador };
68 else Palavra Reservada;
68 { Delimitador {;
69 print Palavra Reservada;
69 ( Delimitador (;
69 "A lista esta cheia." Cadeia de Caracteres;
69 ) Delimitador );
69 ; Delimitador ;;
70 } Delimitador };
71 } Delimitador };
72 else Palavra Reservada;
72 { Delimitador {;
73 if Palavra Reservada;
73 ( Delimitador (;
73 entrada Identificador;
73 == Operador Relacional;
73 1 Número Inteiro;
73 ) Delimitador );
73 then Palavra Reservada;
73 { Delimitador {;
74 imprimirPessoas Identificador;
74 ( Delimitador (;
74 ) Delimitador );
74 ; Delimitador ;;
75 } Delimitador };
76 else Palavra Reservada;
76 { Delimitador {;
77 print Palavra Reservada;
77 ( Delimitador (;
77 "Entrada invalida, tente novamente." Cadeia de Caracteres;
77 ) Delimitador );
77 ; Delimitador ;;
78 } Delimitador };
79 } Delimitador };
80 } Delimitador };
81 } Delimitador };
